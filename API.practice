## APIとは？

### APIとは？
**API**（Application Programming Interface）は、アプリケーションの機能を外部に提供するためのインターフェースです。  
APIを使うことで、他のプログラムやサービスがその機能を利用することができます。

例:  
パソコン「動画の再生数を教えて」  
YouTube API「100万回だよ」

### 超重要
- スマホアプリの裏側で動いている機能がAPIです。
- Webサービスの裏側でもAPIが機能しています。
- 公開されているAPIを使うことで、開発の生産性を大幅に向上させることができます。

---

## WebAPIとは？

### WebAPIとは？
**WebAPI**は、インターネット経由で利用できる便利な機能を提供するAPIです。  
インターネットを通じて外部からAPIを呼び出し、必要なデータや機能を取得します。

例:  
パソコン「再生数が多い動画を教えて」  
YouTube API「〇〇のだよ」

### WebAPIはどこで使う？
WebAPIは様々な場所からアクセスできます。

- **ブラウザ** ↔️ **WebAPI**  
- **スマホアプリ** ↔️ **WebAPI**  
- **ターミナル** ↔️ **WebAPI**

これらの場所からWebAPIにアクセスすることができます。

---

## HTTPの仕組み（重要な二つを抜粋）

- **何に対して** = **URL**  
  例: `https://api.twitter.com/user_timeline` → 「タイムライン情報を取得するURL」

- **何をするか** = **HTTPメソッド**  
  例:  
  `GET` → データを取得する  
  `POST` → データを送信する  
  `PUT` → データを更新する  
  `DELETE` → データを削除する  

#### 例:  
`GET https://api.twitter.com/user_timeline`  
「タイムライン情報教えて」  
「あいよ」

---

## WebAPIを作るには？

### WebAPI作成の流れ

1. **画面遷移図を作る**  
   WebAPIの利用者がどのようにAPIを使うかを設計します。

2. **APIの機能一覧を列挙する**  
   提供したい機能をリストアップします。例えば、データ取得、データ送信など。

3. **URLとHTTPメソッドを設定する**  
   それぞれの機能に対して適切なURLとHTTPメソッド（GET, POST, など）を設定します。

4. **リクエストパラメータを設計する**  
   APIを呼び出す際に必要なパラメータ（例: ユーザーID、検索キーワード）を設計します。

5. **レスポンスデータを設計する**  
   APIが返すデータの形式（例: JSON, XML）や内容を設計します。

---

APIを使うことで、外部の便利な機能を自分のアプリやシステムに組み込むことができ、効率的な開発が可能になります。APIの理解と活用は、現代のシステム開発には欠かせないスキルです。


## 読書ログサービス API設計

### ① 画面遷移図を作る

- **読書ログの一覧** ↔️ **読書ログの作成**

読書ログサービスでは、ユーザーが読んだ本の読書ログを記録し、その記録を一覧で取得できるようにします。

### ② APIの機能一覧を列挙する

- **読書ログを記録する**
- **読書ログの一覧を取得する**

これらの機能を提供するために、APIを設計します。

### ③ URLとHTTPメソッドを設定する

- **読書ログを記録する**  
  `POST https://api.example.com/booklog`

- **読書ログの一覧を取得する**  
  `GET https://api.example.com/booklog`

### ④ リクエストパラメータを設計する

#### 1. **読書ログを記録する**
- **URL**: `POST https://api.example.com/booklog`
- **リクエストパラメータ**:
  - `name`: 本のタイトル
  - `text`: 読書ログの内容（感想など）

#### 2. **読書ログの一覧を取得する**
- **URL**: `GET https://api.example.com/booklog`
- **リクエストパラメータ**: なし

### ⑤ レスポンスデータを設計する

#### 1. **読書ログを記録する**

- **成功**:
  ```json
  {
    "ok": true,
    "booklog": {
      "name": "キングダム",
      "text": "熱い"
    }
  }
失敗:
json

{
  "ok": false,
  "error": "invalid parameter"
}
2. 読書ログの一覧を取得する
成功:
json

{
  "ok": true,
  "booklog": [
    {
      "name": "キングダム",
      "text": "熱い"
    },
    {
      "name": "ワンピース",
      "text": "面白い"
    }
  ]
}


実践編:JavaScriptで作る
  Node.js + Express
  POSTMAN
開発時は細かな動作確認が大事
  後々どこで間違えたか分かりにくい = 結果詰まっちゃう


  # REST APIについて

## RESTとは

REST（Representational State Transfer）は、Webサービス設計思想のひとつです。以下の要素で構成されています：

- **REpresentational (代表的な)**  
- **State (状態)**  
- **Transfer (転送)**  

## RESTの4大設計ルール

### 1. アドレス可能性 (Addressability)

- クライアントはURL（アドレス）を通じてサーバーにアクセスします。
- **例: レストラン**  
  - お客 → ウェイター → 厨房  
  - 同様に、クライアントはAPI URLを通じてサーバーにアクセスします。

### 2. 統一インターフェース (Uniform Interface)

- 何かと何かを繋ぐためのインターフェース。
- クライアントはHTTPメソッド（GET, POST, PUT, DELETE）を使ってサーバーにアクセスし、データを送受信します。データ形式は通常JSONです。
- **例: ウォーターサーバー**  
  - クライアント → サーバー  
  - コップをサーバーに持ってきて蛇口を捻る（GET）  
  - サーバーに水を追加（POST）  
  - 水が減る（PUT）  
  - どのウォーターサーバーでも同じインターフェースが提供されます。

### 3. ステートレス性 (Stateless)

- クライアントの状態をサーバーが保持しない設計。
- **例: 美容室**  
  - クライアントが「ショートカットで」と言うと、常連であれば美容師がそれを理解する（Stateful）。  
  - サーバーはクライアントの情報を保持しないため、再訪問時にも情報は保持されません（Stateless）。  
  - この設計はシンプルでスケーラビリティを向上させ、システムのコストを下げる利点があります。

### 4. 接続性 (Connectability)

- REST APIは他の記事やサービスと簡単に接続できます。  
- **例: リンク構造**  
  - この記事は以下の記事からリンクされています：
    - RESTとSORP[概要を箇条書きにしてまとめてみた]からリンク
    - Webサービスの認証についてまとめるからリンク
    - REST APIについて調べてみましたからリンク
    - REST化したDjangoのJWT認証をdj_rest_authに丸投げするからリンク
    - RustでREST/gRPC/GraphQL APIサーバー達を立てるからリンク

## REST APIとは

RESTの設計ルールに従って構築されたAPIのことを「REST API」と呼びます。


 # API活用によるメリット/デメリット

## メリット

### 1. 開発の効率化/コスト削減
- すべての機能を自社で用意する必要がないため、開発にかかる時間とコストを削減できます。
- 技術に特化した企業がAPIを提供している場合が多く、ハイクオリティな機能を実装できるため、自社の技術力向上にも寄与します。

### 2. セキュリティ・顧客満足度の向上
- APIを利用することで、さまざまなデータや機能を自社で保有することなく活用でき、セキュリティ面の向上を図ることができます。
- 自社で機能を用意する必要がないため、低コストで機能を実装し、価格を抑えたサービスを提供することが可能です。

### 3. システム変更による影響の最小化
- 自社で様々な機能を実装している場合、仕様変更により大部分のシステムを書き換えなければならないことがあります。しかし、APIを利用すればその影響を最小化でき、よりスムーズなシステム運営が可能です。

## デメリット

### 1. API提供サービスに依存してしまう
- 料金提携の変更やAPI提供の中止により、サービスが成り立たなくなってしまう可能性があります。また、APIの仕様変更などで不具合が生じることもあります。
- 自社サーバーに問題がなくても、API提供側のサーバーに障害が発生すると、サービスの利用ができなくなってしまうリスクがあります。
